#
lo = lowess( res$xout, res$yout, f=1/10 )#
tbw$t.max.slope[g*window + 1] = lo$x[lo$y==max(lo$y, na.rm=T)][1]#
#
for( i in 2:(window-1)) {#
lines( tb[ ,g*window + i + 1] ~ tb$Hrs, col=mycolors[i]);#
#
res = find.slope( tb$Hrs, tb[ ,g*window + i + 1], window )#
tbslope[ , g*window + i + 1] = c( res$yout, rep(NA, length(tb[,1]) - length(res$yout)))   #
lo = lowess( res$xout, res$yout, f=1/10 )#
tbw$t.max.slope[g*window + i] = lo$x[lo$y==max(lo$y, na.rm=T)][1]#
}#
#
if ( g < 12) {#
legend( 30 , 1 ,legend=myH2O2, col=mycolors, lty=1);#
} else {#
legend( 30 , 1 ,legend=myDilutions, col=mycolors, lty=1);#
}#
#
my.ylim = c(0, max(tbslope[,2]*2.0 ))#
#
plot( tbslope[ ,g*window + 2] ~ tbslope$time, type='l',main=paste( mywell, mystrain, 'slope'), xlab='Hours', ylab='slope', las=2,xlim=myxlim)#
for( i in 2:(window-1)) {#
lines( tbslope[ ,g*window + i + 1] ~ tbslope$time, col=mycolors[i]);#
}#
#
myy = max( tbslope[ ,g*window + 2], na.rm=T )#
if ( g < 12) {#
legend( 30 , myy ,legend=myH2O2, col=mycolors, lty=1);#
} else {#
legend( 30 , myy ,legend=myDilutions, col=mycolors, lty=1);#
}#
#
sub = tbw[ (g*window+1) : (g*window+9)  , ]#
if ( g < 12) {#
sub$H2O2 = sub[,3]/100#
sub$H2O2[sub$H2O2==0] = 0.001#
plot( sub$t.max.slope ~ sub$H2O2, log='x', type='b', main=paste(mystrain), xlab='H2O2', ylab='t.max.slope' )#
} else {#
plot( sub$t.max.slope ~ sub$Dilutions, log='x', type='b', main=paste(mystrain), xlab='Dilutions', ylab='t.max.slope' )#
}			#
}#
dev.off()#
#
write.csv(tbslope, "_slope.H2O2Feb14Exp.032111.csv");#
write.csv(tbw, "_out.summary.H2O2Feb14Exp.032111.csv");
bc = read.csv("Doubling.H2O2.concentration.040511.csv")
system("ls *csv")
bc = read.csv("Doubling.H2O2.concentration.040511.csv")
bc
halo30
match(bc$strain, halo30$strain)
bc = cbind( bc, halo30[pos2, ])
bc = read.csv("Doubling.H2O2.concentration.040511.csv")#
pos2 = match(bc$strain, halo30$strain)#
bc = cbind( bc, halo30[pos2, ])
bc
plot( bc$DoubleConc ~ bc$DiameterOuter )
summary(lm( bc$DoubleConc ~ bc$DiameterOuter  ))
summary(lm( long( bc$DoubleConc) ~ bc$DiameterOuter  ))
summary(lm( log( bc$DoubleConc) ~ bc$DiameterOuter  ))
plot( bc$DoubleConc ~ bc$DiameterOuter, log='y' )
plot( bc$DoubleConc ~ bc$DiameterOuter, log='xy' )
summary(lm( bc$DoubleConc ~ bc$rls  ))
summary(lm( bc$DoubleConc ~ bc$cls  ))
summary(lm( log( bc$DoubleConc ) ~ bc$cls  ))
pairs( bc )
bc
bc2 = bc[,c(1,6)]#
bc2
bc2
str(bc)
sub$longCLS = 0;#
sub$longCLS[sub$cls> 6] = 1;#
summary(lm( sub$DiameterOut ~ sub$longCLS))#
longCLS = sub[sub$longCLS ==1, ]#
shortCLS = sub[sub$longCLS ==0, ]#
#wilcox.test( longCLS$DiameterOuter, shortCLS$DiameterOuter)#
t.test( longCLS$DiameterOuter, shortCLS$DiameterOuter, alter="less")#
t.test( longCLS$DiameterInner, shortCLS$DiameterInner, alter="less")#
#
summary(lm( sub$DiameterInner ~ sub$rls ))#
summary(lm( sub$DiameterInner ~ sub$cls ))#
summary(lm( sub$DiameterInner ~ sub$a ))#
summary(lm( sub$DiameterInner ~ sub$b ))#
#
plot( DiameterOuter ~ cls, data=sub, pch=16 )#
text(12, 2.2, "p=0.127 t-test")#
#
bc = read.csv("Doubling.H2O2.concentration.040511.csv")#
pos2 = match(bc$strain, halo30$strain)#
bc = cbind( bc, halo30[pos2, ])#
#
plot( bc$DoubleConc ~ bc$DiameterOuter, log='y' )#
summary(lm( bc$DoubleConc ~ bc$DiameterOuter  ))#
summary(lm( log( bc$DoubleConc) ~ bc$DiameterOuter  ))#
#
summary(lm( bc$DoubleConc ~ bc$rls  ))#
summary(lm( bc$DoubleConc ~ bc$cls  ))#
summary(lm( log( bc$DoubleConc ) ~ bc$cls  ))#
#
bc2 = bc[,c(1,6,7,12:15 )]#
bc2
bc2 = bc[,c(1,6,7,12:16 )]#
bc2
pairs( bc2 )
bc2 = bc[,c(1,7,8,12:16 )]#
bc2
pairs( bc2 )
bc2 = bc[,c(1,7,8,12:16 )]#
bc2#
#remove M1-2#
bc2[1,1] = NA#
pairs( bc2 )
summary(lm( bc2$DoubleConc ~ bc2$rls  ))
summary(lm( bc2$DoubleConc ~ bc2$cls  ))
summary(lm( log( bc2$DoubleConc ) ~ bc2$cls  ))
plot( DoubleConc ~ cls, data=bc2, pch=16 )
plot( DoubleConc ~ cls, data=bc2, pch=16 )#
text(12, 1.75, "p=0.102")
lifespan = read.delim("062705.rls.cls.tab")#
str(lifespan)#
#
halo = read.csv("H2O2.Halo.star.strains.by.DP.ADC.csv")#
halo = halo[, 1:8]#
halo#
halo30 = halo[halo$H2O2Concentration==0.3, ]#
#
pos = match( halo30$Strain, lifespan$strain)#
halo30 = cbind( halo30, lifespan[pos,])#
rownames(halo30) = as.character(halo30[,1])#
sub = halo30[,c(4,5,10:13)]#
sub#
#
#remove M14, M22#
sub["M14", 1:2] = c(NA, NA)#
sub["M22", 1:2] = c(NA, NA)#
#
pairs(sub)#
#
summary(lm( sub$DiameterOuter ~ sub$rls ))#
summary(lm( sub$DiameterOuter ~ sub$cls ))#
summary(lm( sub$DiameterOuter ~ sub$a ))#
summary(lm( sub$DiameterOuter ~ sub$b ))#
summary(lm( sub$DiameterOuter ~ sub$rls + sub$cls ))#
summary(lm( sub$DiameterOuter ~ sub$a + sub$b + sub$cls ))#
#
sub$longCLS = 0;#
sub$longCLS[sub$cls> 6] = 1;#
summary(lm( sub$DiameterOut ~ sub$longCLS))#
longCLS = sub[sub$longCLS ==1, ]#
shortCLS = sub[sub$longCLS ==0, ]#
#wilcox.test( longCLS$DiameterOuter, shortCLS$DiameterOuter)#
t.test( longCLS$DiameterOuter, shortCLS$DiameterOuter, alter="less")#
t.test( longCLS$DiameterInner, shortCLS$DiameterInner, alter="less")#
#
summary(lm( sub$DiameterInner ~ sub$rls ))#
summary(lm( sub$DiameterInner ~ sub$cls ))#
summary(lm( sub$DiameterInner ~ sub$a ))#
summary(lm( sub$DiameterInner ~ sub$b ))#
#
plot( DiameterOuter ~ cls, data=sub, pch=16 )#
text(12, 2.2, "p=0.127 t-test")#
#
bc = read.csv("Doubling.H2O2.concentration.040511.csv")#
pos2 = match(bc$strain, halo30$strain)#
bc = cbind( bc, halo30[pos2, ])#
#
plot( bc$DoubleConc ~ bc$DiameterOuter, log='y' )#
summary(lm( bc$DoubleConc ~ bc$DiameterOuter  ))#
summary(lm( log( bc$DoubleConc) ~ bc$DiameterOuter  ))#
#
summary(lm( bc$DoubleConc ~ bc$rls  ))#
summary(lm( bc$DoubleConc ~ bc$cls  ))#
summary(lm( log( bc$DoubleConc ) ~ bc$cls  ))#
#
bc2 = bc[,c(1,7,8,12:16 )]#
bc2#
#remove M1-2#
bc2[1,1] = NA#
pairs( bc2 )#
#
summary(lm( bc2$DoubleConc ~ bc2$rls  ))#
summary(lm( bc2$DoubleConc ~ bc2$cls  ))#
#summary(lm( log( bc2$DoubleConc ) ~ bc2$cls  ))#
#
plot( DoubleConc ~ cls, data=bc2, pch=16 )#
text(12, 1.75, "p=0.102")
summary(lm( bc2$DoubleConc ~ bc2$rls  ))
debug = 0;
find.slope = function( xin, yin, window) {
halfwindow = floor( window /2 )
end = length(xin) - halfwindow
xout = (halfwindow+1):end;
yout = (halfwindow+1):end;
count = 1
for ( i in (halfwindow+1):end ) {
pos = (i-halfwindow):(i+halfwindow)
m = lm( yin[pos] ~ xin[pos] )
xout[count]  = xin[i]
yout[count] = m$coeff[2]
count = count + 1;
}
return(data.frame(cbind(xout,yout)) )
}
tb = read.csv( "Feb15,2011.H2O2.titration.12.star.strain.csv");
tb = tb[!is.na(tb[,1]), ] #remove empty spots
#change time to numerica values
tb$Time = as.character(tb$Time)
bb = strsplit(tb$Time, ":")
tb$Hrs <- sapply(bb,function(x){as.numeric(x[1])+as.numeric(x[2])/60 + as.numeric(x[3])/3600 })
tbw =	read.csv("wells.Feb15.H2O2.bioscreen.csv", colClasses=c(NA,"character", NA, NA, NA));
tbw$wells2 = paste("Wells", tbw$Wells, sep='.')
window = 10;
groups = 13;
mycolors = c("black", "cyan", "yellow","green", "brown", "red","blue","purple","pink", "orange", "navy" )
myH2O2 = unique(tbw[,3], na.rm=T)
myH2O2 = myH2O2[! is.na(myH2O2)] / 100
myDilutions = unique( tbw[,5])
tbslope = tb;
tbw$t.max.slope = NA; #time of max slope
myxlim = c(0, max(tb$Hrs))
myylim = c(0, 1.8)
pdf("bioscreen.H2O2.Feb8,2011.logY.pdf", width=8, height=8)
for ( g in 0:groups){
#first plot wildtype
mywell = names(tb)[g*window + 2]
mystrain = tbw$Strain[g*window + 1]
#plot( tb[ ,g*window + 2] ~ tb$Hrs, main=paste('group', g, mywell, mystrain))
plot( tb[ ,g*window + 2] ~ tb$Hrs, main=paste( mywell, mystrain), type='l',xlab='Hours', ylab='OD600nm', las=2, xlim=myxlim, log='y' )
res = find.slope( tb$Hrs, tb[ ,g*window + 2], window )
tbslope[ ,  g*window + 2 ] = c( res$yout, rep(NA, length(tb[,1]) - length(res$yout)))
tbslope$time = c( res$xout, rep(NA, length(tb[,1]) - length(res$yout)))
lo = lowess( res$xout, res$yout, f=1/10 )
tbw$t.max.slope[g*window + 1] = lo$x[lo$y==max(lo$y, na.rm=T)][1]
for( i in 2:(window-1)) {
lines( tb[ ,g*window + i + 1] ~ tb$Hrs, col=mycolors[i]);
res = find.slope( tb$Hrs, tb[ ,g*window + i + 1], window )
tbslope[ , g*window + i + 1] = c( res$yout, rep(NA, length(tb[,1]) - length(res$yout)))
lo = lowess( res$xout, res$yout, f=1/10 )
tbw$t.max.slope[g*window + i] = lo$x[lo$y==max(lo$y, na.rm=T)][1]
}
if ( g < 12) {
legend( 30 , 1 ,legend=myH2O2, col=mycolors, lty=1);
} else {
legend( 30 , 1 ,legend=myDilutions, col=mycolors, lty=1);
}
my.ylim = c(0, max(tbslope[,2]*2.0 ))
plot( tbslope[ ,g*window + 2] ~ tbslope$time, type='l',main=paste( mywell, mystrain, 'slope'), xlab='Hours', ylab='slope', las=2,xlim=myxlim)
for( i in 2:(window-1)) {
lines( tbslope[ ,g*window + i + 1] ~ tbslope$time, col=mycolors[i]);
}
myy = max( tbslope[ ,g*window + 2], na.rm=T )
if ( g < 12) {
legend( 30 , myy ,legend=myH2O2, col=mycolors, lty=1);
} else {
legend( 30 , myy ,legend=myDilutions, col=mycolors, lty=1);
}
sub = tbw[ (g*window+1) : (g*window+9)  , ]
if ( g < 12) {
sub$H2O2 = sub[,3]/100
sub$H2O2[sub$H2O2==0] = 0.001
plot( sub$t.max.slope ~ sub$H2O2, log='x', type='b', main=paste(mystrain), xlab='H2O2', ylab='t.max.slope' )
} else {
plot( sub$t.max.slope ~ sub$Dilutions, log='x', type='b', main=paste(mystrain), xlab='Dilutions', ylab='t.max.slope' )
}
}
?sum
x1 = 1:100
x2 = 5:105
rm(list=ls())
debug = 9;
pairwise_sum_of_errors = function( X1, X2, Start1,End1,Start2, End2 ) {
if( (End1 - Start1)==(End2 - Start2) ) {
return sum(( X1[Start1:End1]-X2[Start2:End2] )^2)
} else {
return NA;
}
}
x1 = 1:100
x2 = 5:105
pairwise_sum_of_errors( x1, x2, 1, 100, 1,100)
pairwise_sum_of_errors = function( X1, X2, Start1,End1,Start2, End2 ) {
if( (End1 - Start1)==(End2 - Start2) ) {
return sum(( X1[Start1:End1]-X2[Start2:End2] )^2)
} else {
return NA;
}
}
pairwise_sum_of_errors = function( X1, X2, Start1,End1,Start2, End2 ) {
if( (End1 - Start1) == (End2 - Start2) ) {
return sum(( X1[Start1:End1]-X2[Start2:End2] )^2)
} else {
return NA;
}
}
pairwise_sum_of_errors = function( X1, X2, Start1,End1,Start2, End2 ) {
if( (End1 - Start1) == (End2 - Start2) ) {
return( sum( ( X1[Start1:End1]-X2[Start2:End2] )^2))
} else {
return( NA);
}
}
x1 = 1:100
x2 = 5:105
pairwise_sum_of_errors( x1, x2, 1, 100, 1,100)
sum((x1-x2)^2)
x1
x2
x1-x2
x1
x2
x2
x1 = 1:100
x2 = 5:104
pairwise_sum_of_errors( x1, x2, 1, 100, 1,100)
x2
sum((x1-x2)^2)
pairwise_sum_of_errors( x1, x2, 5, 100, 1,96)
sum((x1-x2)^2)
pairwise_sum_of_errors( x1, x2, 5, 100, 1,96)
sum((x1[5:100]-x2[1:96])^2)
pairwise_sum_of_errors = function( X1, X2, Start1,End1,Start2, End2 ) {
if( (End1 - Start1) == (End2 - Start2) ) {
return( sum( ( X1[Start1:End1]-X2[Start2:End2] )^2))
} else {
print("Error: X1 and X2 should have the same lengths")
return( NA);
}
}
#testing
x1 = 1:100;  x2 = 5:104
pairwise_sum_of_errors( x1, x2, 5, 100, 1,96)
sum((x1[5:100]-x2[1:96])^2)
pairwise_sum_of_errors( x1, x2, 5, 100, 1,100)
?round
#align two vectors with equal lengths
#Let's assume start2 lags behind start1
#start2 = start1 + delta # 2nd start lags behind 1st start by delta
pairwise_cost_of_shifted_vectors = function( X1, X2, delta, low.threshold=0.01 ){
delta = ceiling( (delta+0.5) ) #delta must be an integer
X1[X1<low.threshold]=0;
X2[X2<low.threshold]=0;
Start1 = 1;
Start2 = Start1 + delta;  #left truncation at delta
End2 = length(X2)
End1 = length(X1) - delta; #right truncation at delta
if( (End1 - Start1) == (End2 - Start2) ) {
return( sum( ( X1[Start1:End1]-X2[Start2:End2] )^2))
} else {
print("Error: X1 and X2 should have the same lengths")
return( NA);
}
}
pairwise_cost_of_shifted_vectors( x1, x2, 5)
pairwise_sum_of_errors( x1, x2, 5, 100, 1,96)
#testing
x1 = 5:104
x2 = 1:100;
pairwise_sum_of_errors( x1, x2, 1,96, 5,100 )
sum((x1[5:100]-x2[1:96])^2)
pairwise_cost_of_shifted_vectors( x1, x2, 5)
pairwise_cost_of_shifted_vectors( x1, x2, 4)
pairwise_cost_of_shifted_vectors( x1, x2, 3)
pairwise_cost_of_shifted_vectors = function( X1, X2, delta, low.threshold=0.01, debug=10 ){
delta = ceiling( (delta+0.5) ) #delta must be an integer
X1[X1<low.threshold]=0;
X2[X2<low.threshold]=0;
Start1 = 1;
Start2 = Start1 + delta;  #left truncation at delta
End2 = length(X2)
End1 = length(X1) - delta; #right truncation at delta
if( (End1 - Start1) == (End2 - Start2) ) {
return( sum( ( X1[Start1:End1]-X2[Start2:End2] )^2))
} else {
print("Error: X1 and X2 should have the same lengths")
return( NA);
}
}
pairwise_cost_of_shifted_vectors = function( X1, X2, delta, low.threshold=0.01, debug=10 ){
delta = ceiling( (delta+0.5) ) #delta must be an integer
X1[X1<low.threshold]=0;
X2[X2<low.threshold]=0;
Start1 = 1;
Start2 = Start1 + delta;  #left truncation at delta
End2 = length(X2)
End1 = length(X1) - delta; #right truncation at delta
if(debug){ print(paste('Start1', Start1, "Start2", Start2, "End1", End1, "End2", End2))
}
if( (End1 - Start1) == (End2 - Start2) ) {
return( sum( ( X1[Start1:End1]-X2[Start2:End2] )^2))
} else {
print("Error: X1 and X2 should have the same lengths")
return( NA);
}
}
pairwise_cost_of_shifted_vectors( x1, x2, 3)
#align two vectors with equal lengths
#Let's assume start2 lags behind start1
#start2 = start1 + delta # 2nd start lags behind 1st start by delta
pairwise_cost_of_shifted_vectors = function( X1, X2, delta, low.threshold=0.01, debug=10 ){
delta = floor( (delta+0.5) ) #delta must be an integer
X1[X1<low.threshold]=0;
X2[X2<low.threshold]=0;
Start1 = 1;
Start2 = Start1 + delta;  #left truncation at delta
End2 = length(X2)
End1 = length(X1) - delta; #right truncation at delta
if(debug){ print(paste('Start1', Start1, "Start2", Start2, "End1", End1, "End2", End2))
}
if( (End1 - Start1) == (End2 - Start2) ) {
return( sum( ( X1[Start1:End1]-X2[Start2:End2] )^2))
} else {
print("Error: X1 and X2 should have the same lengths")
return( NA);
}
}
#testing
x1 = 5:104
x2 = 1:100;
pairwise_sum_of_errors( x1, x2, 1,96, 5,100 )
pairwise_cost_of_shifted_vectors( x1, x2, 3)
x1 = 5:104; x2 = 1:100;
pairwise_sum_of_errors( x1, x2, 1,96, 5,100 )
pairwise_cost_of_shifted_vectors( x1, x2, 4)
?optim
pairwise_cost_of_shifted_vectors = function( delta, X1, X2,  low.threshold=0.01, debug=10 ){
delta = floor( (delta+0.5) ) #delta must be an integer
X1[X1<low.threshold]=0;
X2[X2<low.threshold]=0;
Start1 = 1;
Start2 = Start1 + delta;  #left truncation at delta
End2 = length(X2)
End1 = length(X1) - delta; #right truncation at delta
if(debug){ print(paste('Start1', Start1, "Start2", Start2, "End1", End1, "End2", End2))
}
if( (End1 - Start1) == (End2 - Start2) ) {
return( sum( ( X1[Start1:End1]-X2[Start2:End2] )^2))
} else {
print("Error: X1 and X2 should have the same lengths")
return( NA);
}
}
pairwise_cost_of_shifted_vectors( 4, x1, x2)
optim(c(delta), fn=pairwise_cost_of_shifted_vectors, X1=x1, X2=x2)
delta = 1
optim(c(delta), fn=pairwise_cost_of_shifted_vectors, X1=x1, X2=x2)
optim(c(delta), fn=pairwise_cost_of_shifted_vectors, X1=x1, X2=x2, method="Brent")
optim(c(delta), fn=pairwise_cost_of_shifted_vectors, X1=x1, X2=x2, method="Brent", lower=c(1), upper=c(100))
delta = 4
optim(c(delta), fn=pairwise_cost_of_shifted_vectors, X1=x1, X2=x2, method="Brent", lower=c(1), upper=c(100))
delta = 4
res1 = optim(c(delta), fn=pairwise_cost_of_shifted_vectors, X1=x1, X2=x2, method="Brent", lower=c(1), upper=c(100))
res1
x1 = 50:149; x2 = 1:100;
pairwise_sum_of_errors( x1, x2, 1,50, 49,100 )
pairwise_sum_of_errors( x1, x2, 1,49, 50,100 )
pairwise_sum_of_errors( x1, x2, 1,50, 50,100 )
pairwise_sum_of_errors( x1, x2, 1,50, 51,100 )
pairwise_sum_of_errors( x1, x2, 1,50, 49,99 )
pairwise_sum_of_errors( x1, x2, 1,50, 49,98 )
x2[x2==50]
x2==50
x2[40:50]
pairwise_sum_of_errors( x1, x2, 1,50, 50,99 )
pairwise_cost_of_shifted_vectors( 49, x1, x2)
delta = 4
res1 = optim(c(delta), fn=pairwise_cost_of_shifted_vectors, X1=x1, X2=x2, method="Brent", lower=c(1), upper=c(100))
res1
#testing 1
x1 = 5:104; x2 = 1:100;
pairwise_sum_of_errors( x1, x2, 1,96, 5,100 )
pairwise_cost_of_shifted_vectors( 4, x1, x2)
delta = 4
res1 = optim(c(delta), fn=pairwise_cost_of_shifted_vectors, X1=x1, X2=x2, method="Brent", lower=c(1), upper=c(100))
#return 3 not 4?
res1
#testing 2
x1 = 50:149; x2 = 1:100;
pairwise_sum_of_errors( x1, x2, 1,50, 50,99 )
pairwise_cost_of_shifted_vectors( 49, x1, x2)
delta = 4
res2 = optim(c(delta), fn=pairwise_cost_of_shifted_vectors, X1=x1, X2=x2, method="Brent", lower=c(1), upper=c(100))
#return 3 not 4?
res2
res2
delta = 50
res2 = optim(c(delta), fn=pairwise_cost_of_shifted_vectors, X1=x1, X2=x2, method="Brent", lower=c(1), upper=c(100))
#return 3 not 4?
res2
delta = 50
res2 = optim(c(delta), fn=pairwise_cost_of_shifted_vectors, X1=x1, X2=x2, method="Brent", lower=c(1), upper=c(100))
### real data
tb = read.csv( "Feb15,2011.H2O2.titration.12.star.strain.csv");
tb = tb[!is.na(tb[,1]), ] #remove empty spots
tb$Time = as.character(tb$Time)
bb = strsplit(tb$Time, ":")
tb$Hrs <- sapply(bb,function(x){as.numeric(x[1])+as.numeric(x[2])/60 + as.numeric(x[3])/3600 })
head(tb)
tbw =	read.csv("wells.Feb15.H2O2.bioscreen.csv", colClasses=c(NA,"character", NA, NA, NA));
tbw$wells2 = paste("Wells", tbw$Wells, sep='.')
window = 10;
groups = 13;
mycolors = c("black", "cyan", "yellow","green", "brown", "red","blue","purple","pink", "orange", "navy" )
myH2O2 = unique(tbw[,3], na.rm=T)
myH2O2 = myH2O2[! is.na(myH2O2)] / 100
myDilutions = unique( tbw[,5])
tbw
head(tbw)
g= 1
mywell = names(tb)[g*window + 2]
mywell
